For empty sections.
> `Nothing has been removed.`

For linking to a source as a standalone version.
[[See more]](./)

Github Co-Pilot prompt to update the changelog file.

Context:
- You are working in a Git project.
- The current working directory has uncommitted changes.
- The latest committed state is at HEAD (use as base reference).
- This project maintains a `Changelog.md` and a `todo.md`.

Your Task:
1. Use the output of:
   - `git status` → to detect file-level changes: added, modified, deleted, renamed.
   - `git diff` → to understand line-level changes, moved code, or completed TODOs.

2. Update `Changelog.md` by replacing the previous top entry with a new section in the following format:

## 📅 Updated to Commit #<Commit Number> | Date: *<Current Date>*

### 🔗 [Open TODO List](./todo.md)

Group the changes as:

### ✅ Completed
- Show completed TODO items (matched by content or status).
- Include file/line links for each, with markdown paths.

### ➕ Added
- List newly created files or key components.
- Add links to each file.

### 🔄 Changed
- List modified files.
- Include a short summary if possible.
- Link to relevant file sections.

### 🗑️ Deleted
- List removed files.

### 🏷️ Renamed / Moved
- Show changes like: `src/oldName.ts → src/newName.ts`
- Add markdown links to both versions (if available).

3. Update `todo.md` as follows:
- Keep the format:
  # 📘 <Your Project Name> - Todo List

  [`← Back Changelog`](./Changelog.md)

- Append or update:
  - [ ] Uncompleted tasks
  - [x] Mark completed tasks with checkboxes
  - For completed ones, include a link to the related section in `Changelog.md`

4. Ensure both files are:
   - Consistent
   - Markdown formatted
   - Easy to read and navigate with links
   - Only reflect the latest uncommitted changes

5. Do **not** use or output raw Git commands.
6. Ensure your results are persistent, meaning they can be reapplied as the uncommitted state evolves.
